input {
  s3 {
    bucket => "elb-logs-atom-prod-ktp"
    aws_credentials_file => "/logstash/aws_creds"
    region => "us-east-1"
    type => "elb"
    sincedb_path => "/logstash/last_s3_file_api_atom.db"
    temporary_directory => "/logstash"
    prefix => "api-atom-ktp-io"
  }
  s3 {
    bucket => "elb-logs-atom-prod-ktp"
    aws_credentials_file => "/logstash/aws_creds"
    region => "us-east-1"
    type => "elb"
    sincedb_path => "/logstash/last_s3_file_gateway_atom.db"
    temporary_directory => "/logstash"
    prefix => "gateway-atom-kaptest-com"
  }
  s3 {
    bucket => "elb-logs-atom-prod-ktp"
    aws_credentials_file => "/logstash/aws_creds"
    region => "us-east-1"
    type => "elb"
    sincedb_path => "/logstash/last_s3_file_jasper_api.db"
    temporary_directory => "/logstash"
    prefix => "jasper-api-kaptest-com"
  }
  s3 {
    bucket => "elb-logs-atom-prod-ktp"
    aws_credentials_file => "/logstash/aws_creds"
    region => "us-east-1"
    type => "elb"
    sincedb_path => "/logstash/last_s3_file_study.db"
    temporary_directory => "/logstash"
    prefix => "study-atom-ktp-io"
  }

}

## Add your filters here

filter {
    if [type] == "elb" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IP:clientip}:%{INT:clientport:int} (?:(%{IP:backendip}:?:%{INT:backendport:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} %{INT:response:int} %{INT:backend_response:int} %{INT:received_bytes:int} %{INT:bytes:int} \"(?:%{WORD:verb} (?<request>%{URIPROTO:proto}://(?:%{USER}(?::[^@]*)?@)?(?<urihost>((?:%{IP}|\b(?:[0-9A-Za-z][0-9A-Za-z\-_]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z\-_]{0,62}))*(\.?|\b))(?::%{POSINT:port})?))(?:%{URIPATH:page}(?<params>\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\-\[\]<>\^\`]*)?)?)(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" \"%{DATA:useragent}\" %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol}"]
        }
        date {
            match => [ "timestamp", "ISO8601" ]
        }
    }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}
